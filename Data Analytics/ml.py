{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPbG4mm3hJJyrfjaCgfTGHT"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RH3OuLZ_1W_D","executionInfo":{"status":"ok","timestamp":1712313489990,"user_tz":-330,"elapsed":22885,"user":{"displayName":"Sai Teja","userId":"03866594505487991622"}},"outputId":"15a10850-10ed-4a21-bf6e-c5c5edbef9ed"},"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 383ms/step - loss: 0.5323 - accuracy: 0.9000\n","Test Accuracy: 0.8999999761581421\n","Test Accuracy: 0.7\n"]}],"source":["import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.datasets import load_iris\n","import tensorflow as tf\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","\n","\n","iris = load_iris()\n","X = iris.data\n","y = iris.target\n","\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","\n","y_train_encoded = tf.keras.utils.to_categorical(y_train)\n","y_test_encoded = tf.keras.utils.to_categorical(y_test)\n","\n","\n","model = tf.keras.Sequential([\n","    tf.keras.layers.Dense(10, activation='relu', input_shape=(4,)),\n","    tf.keras.layers.Dense(3, activation='softmax')\n","])\n","\n","model.compile(optimizer='adam',\n","              loss='categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","\n","model.fit(X_train_scaled, y_train_encoded, epochs=50, batch_size=32, verbose=0)\n","\n","\n","test_loss, test_accuracy = model.evaluate(X_test_scaled, y_test_encoded)\n","print(f'Test Accuracy: {test_accuracy}')\n","\n","\n","X_train_torch = torch.tensor(X_train_scaled, dtype=torch.float32)\n","y_train_torch = torch.tensor(y_train, dtype=torch.long)\n","X_test_torch = torch.tensor(X_test_scaled, dtype=torch.float32)\n","y_test_torch = torch.tensor(y_test, dtype=torch.long)\n","\n","\n","class SimpleNN(nn.Module):\n","    def __init__(self):\n","        super(SimpleNN, self).__init__()\n","        self.fc1 = nn.Linear(4, 10)\n","        self.fc2 = nn.Linear(10, 3)\n","\n","    def forward(self, x):\n","        x = torch.relu(self.fc1(x))\n","        x = torch.softmax(self.fc2(x), dim=1)\n","        return x\n","\n","\n","model = SimpleNN()\n","criterion = nn.CrossEntropyLoss()\n","optimizer = optim.Adam(model.parameters())\n","\n","\n","for epoch in range(50):\n","    optimizer.zero_grad()\n","    outputs = model(X_train_torch)\n","    loss = criterion(outputs, y_train_torch)\n","    loss.backward()\n","    optimizer.step()\n","\n","\n","with torch.no_grad():\n","    outputs = model(X_test_torch)\n","    _, predicted = torch.max(outputs, 1)\n","    accuracy = (predicted == y_test_torch).sum().item() / len(y_test_torch)\n","    print(f'Test Accuracy: {accuracy}')\n"]}]}